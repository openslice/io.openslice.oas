
# For Spring Actuator /info endpoint
info:
    artifact: oas-service
    name: oas-service
    description: Spring oas-service
    version: 1.0.0

server:
  port: 13101
  servlet:
    context-path : /oas-api

    
spring:
  profiles: default
  application:
    name: openslice-assurance-services-management-api
  datasource:
    url: jdbc:mysql://localhost/oasdb?createDatabaseIfNotExist=true&useUnicode=true&nullCatalogMeansCurrent=true&characterEncoding=utf8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    password: letmein
    username: root
    databaseSchemaUpdate: true
  jpa:
    database-platform: io.openslice.oas.LocalMysqlDialect
    hibernate:
      ddl-auto: update
    show-sql: false
    generate-ddl: true
    properties.hibernate.current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext 
    properties:
      hibernate:
        connection:
          characterEncoding: utf-8
          CharSet: utf-8
          useUnicode: true 
  activemq:
    brokerUrl: tcp://localhost:61616
    user: admin
    password: admin
    pool:
      enabled: true
      max-connections: 100
      
      
logging:
  level:
    root: INFO
    io.openslice.oas: DEBUG
    org.springframework: INFO
    org.apache.camel: INFO 
    reactor.netty.tcp.TcpClient: INFO 
    reactor.netty.http.client.HttpClient: INFO 
  pattern:
    console: "%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"
    file: "%d %p %c{1.} [%t] %m%n"
    
keycloak:
  realm: openslice
  auth-server-url: http://localhost/auth
  ssl-required: none
  resource: admin-cli
  credentials:
    secret: none
  public-client: false
  bearer-only: true
  principal-attribute: preferred_username

keycloak-internal-auth-server-url: http://localhost/auth
keycloak-admin-password: Pa55w0rd
    
    
swagger:
  authserver: http://localhost/auth/realms/openslice
  clientid: "osapiWebClientId"
  clientsecret: "secret"
  
oauthsign:
   key: "EK97Y7Y9WPGG1MEG"



CATALOG_GET_SERVICEORDERS: "jms:queue:CATALOG.GET.SERVICEORDERS"
CATALOG_GET_SERVICEORDER_BY_ID: "jms:queue:CATALOG.GET.SERVICEORDER_BY_ID"
CATALOG_UPD_SERVICEORDER_BY_ID: "jms:queue:CATALOG.UPD.SERVICEORDER_BY_ID"
CATALOG_GET_INITIAL_SERVICEORDERS_IDS: "jms:queue:CATALOG.GET.INITIAL_SERVICEORDERS"
CATALOG_GET_SERVICEORDER_IDS_BY_STATE: "jms:queue:CATALOG.GET.ACKNOWLEDGED_SERVICEORDERS"
CATALOG_ADD_SERVICE: "jms:queue:CATALOG.ADD.SERVICE"
CATALOG_UPD_SERVICE: "jms:queue:CATALOG.UPD.SERVICE"
CATALOG_GET_SERVICE_BY_ID: "jms:queue:CATALOG.GET.SERVICE"
CATALOG_SERVICE_QUEUE_ITEMS_GET: "jms:queue:CATALOG.SERVICEQUEUEITEMS.GET"
CATALOG_SERVICE_QUEUE_ITEM_UPD: "jms:queue:CATALOG.SERVICEQUEUEITEM.UPDATE"
CATALOG_SERVICE_QUEUE_ITEM_DELETE: "jms:queue:CATALOG.SERVICEQUEUEITEM.DELETE"
CATALOG_GET_SERVICESPEC_BY_ID: "jms:queue:CATALOG.GET.SERVICESPEC_BY_ID"
CATALOG_SERVICES_TO_TERMINATE: "jms:queue:CATALOG.GET.SERVICETOTERMINATE"

CATALOG_GET_PARTNER_ORGANIZATON_BY_ID: "jms:queue:CATALOG.GET.PARTNER_ORGANIZATION_BY_ID"
CATALOG_UPDATE_PARTNER_ORGANIZATION: "jms:queue:CATALOG.UPD.PARTNER_ORGANIZATION"
CATALOG_GET_EXTERNAL_SERVICE_PARTNERS: "jms:queue:CATALOG.GET.EXTERNALSERVICEPARTNERS"
CATALOG_UPD_EXTERNAL_SERVICESPEC: "jms:queue:CATALOG.UPD.EXTERNAL_SERVICESPEC"

NFV_CATALOG_DEPLOY_NSD_REQ: "jms:queue:NFVCATALOG.DEPLOY.NSD_REQ"
NFV_CATALOG_GET_DEPLOYMENT_BY_ID : "jms:queue:NFVCATALOG.GET.DEPLOYMENT_BY_ID"
NFV_CATALOG_GET_NSD_BY_ID: "jms:queue:NFVCATALOG.GET.NSD_BY_ID" 
NFV_CATALOG_UPD_DEPLOYMENT_BY_ID: "jms:queue:NFVCATALOG.UPD.DEPLOYMENT_BY_ID"
NFV_CATALOG_NS_DAY2_ACTION: "jms:queue:ns.action.run"


# ===================================================================
# Common Flowable Spring Boot Properties
# SEE: https://flowable.com/open-source/docs/bpmn/ch05a-Spring-Boot/
# This sample file is provided as a guideline. Do NOT copy it in its
# entirety to your own application.            ^^^
# ===================================================================

flowable:
    database-schema-update: true

# Core (Process) https://github.com/flowable/flowable-engine/tree/master/modules/flowable-spring-boot/flowable-spring-boot-starters/flowable-spring-boot-autoconfigure/src/main/java/org/flowable/spring/boot/FlowableProperties.java
#flowable.check-process-definitions: true # Whether process definitions need to be auto deployed.
#flowable.database-schema= # In some situations you want to set the schema to use for table checks / generation if the database metadata doesn't return that correctly.
#flowable.db-history-used=true # Whether db history should be used.
#flowable.deployment-name=SpringBootAutoDeployment # The name of the auto deployment.
#flowable.history-level=audit # The history level that needs to be used.
#flowable.process-definition-location-prefix=classpath*:/processes/ # The folder in which processes need to be searched for auto deployment.
#flowable.process-definition-location-suffixes=**.bpmn20.xml,**.bpmn # The suffixes (extensions) of the files that needs to be deployed from the 'processDefinitionLocationPrefix' location.

